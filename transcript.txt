TODO = section; ### = gap; @@@ = badly phrased; +++ = might need to be moved, *** = diagram

emacs: C-x h (select whole buffer), M-= (word count)
TODO: move to Word when I have pictures

Abstract:



Summary of talk: (235 words)

Knots are fascinating, complicated, and inherently visual objects! Here, for example: http://katlas.org/wiki/The_Rolfsen_Knot_Table_Mosaic How do we serialize them into text? 

Serializing knots into text allows us to think about them systematically; for example, we can now use a notation to write out all knots algorithmically. It turns out that enumerating knots is a concrete way to use a notation and compare its quality along various axes. For example, how easy is it for a human to write the notation and draw the corresponding knot? What about for a computer? How easy is it to check if two enumerated knots are equivalent? What new insights and operations can powerful representations enable?

In this talk, we will enumerate all the knots of <= 7 crossings by using notations of two approaches, the Dowker school and the Conway school. (To get the most out of this talk, try this yourself without looking at existing approaches!) Along the way, we will examine the quality of the notations along the axes listed earlier. 

John Conway made this boast in his seminal paper: "Little [who used a Dowker-style notation] tells us that the enumeration of the 54 knots of [6] took him 6 years -- from 1893 to 1899 -- the notation we shall soon describe made this just one afternoon's work!" We'll see how he accomplished this feat, and what tradeoffs he had to make.

------------------

[TODO thesis] 

Why talk about these strange loops at StrangeLoop?
Takeaways here: 

Different notations, powerful notations, knots are cool

------------------

What's a knot in the first place?

Our idea of a knot is sort of a shoelace-tying knot with loose ends:

Mathematicians' idea of a knot is basically to tie these ends together, into a line embedded in 3-dimensional space: 

And this knot is made of very stretchy string, allowing you to do this (called an isotopy:
[to trefoil]

We usually talk about the complexity of a knot in terms of the number of crossings it has. A crossing can be an overcrossing or an undercrossing. The simplest knot is the unknot, or a simple loop. We also have links, which are knots of multiple strings. The Olympic rings are an example of a link.

Two (projections of) knots are the same knot if and only if they can be transformed into each other via the Reidemeister moves, which are three moves: [diagram]

In Type I, you twist or untwist the knot.
In Type II, you move one loop completely over the other.
In Type III, you move a string completely over or under a crossing.
[cite Wikipedia]

Now you might be wondering if there ARE any knots. Or if there are any knots DIFFERNT from the unknot.

More specifically -- how do I know that the trefoil is a knot with minimum three crossings? (We can easily add more crossings, so we're talking about the minimum.) Maybe there's some sequence of moves that can transform it into the unknot. Take my word that there is NO sequence of moves that can do this, so indeed different knots exist. The proof isn't easy. Look up "knot invariants" if you're interested.

Deciding knot equivalence for any two knots is still an open problem, but has been solved for special cases of knots.

--------

TODO: why care about knot theory / what it's good for

--------

Now that we've got the basic knot definitions and operations, let's look at some knots.
Knots can be very complex. [Knot Atlas]
Knots seem inherently visual. [unlike graphs] Many knot proofs are done entirely via diagram.

Their visuality gives rise to the following difficulty:

Mathematician John Conway:
  One thing I never figured out was how to tell a knot
  to a nerd over the phone! Keep in mind that the person
  you're talking to is just as much of a nerd as you are! [1]
[1] Knot tables exist

Let's try some ways for you to tell me this knot over the phone:
[six-crossing knot]

First, you say: "It has six crossings!"
This is an actual notation: the Alexander-Briggs notation consists of a knot's crossing number, and an arbitrary subscript telling us which of the six-crossing knots it is in some arbitrary order.

But the number of crossings isn't enough information! It could be this knot. Or this one.
[6_1, 6_2, 6_3...]

------------------

You and I can share information beforehand. Let's have this information be a common protocol about how to construct the knot. The next most obvious thing to add to the number of crossings is a *direction* on top of the crossing number.

We do this by picking a particular crossing, a strand at that crossing, and a direction to travel in on top of that crossing. We label the first crossing with "1", travel around the strand, and label each subsequent crossing with the next number.

For example, for the knot 6_1, we would travel around and get this decorated knot:
TODO

Writing down each pairing for each crossing, we would get: TODO

Putting all the odd numbers at the top, and sorting all the odd numbers, we get:
TODO

We just keep the even numbers, so the final notation for 6_1 is: TODO

Here are some properties of Dowker notation. 
If there are n crossings, we get 2n numbers.
And every crossing gets an odd and an even number -- why? (exercise TODO)

This can only encode alternating knots (why?), so we create the augmented Dowker notation by adding negative signs when TODO

On your end, you need to think about correspondence: given a particular knot, does there always exist a notation for it? (Yes.) If so, how many notations correspond to it? (At least the number of crossings -- and more?)
TODO picture of "bijection"
TODO: give sender and receiver names? e.g. Maria and Keisha

This knot has multiple notations, depending on which crossing I start at.
TODO other multiples?

---

Now, you tell me this notation over the phone. 
I try to draw 6_1. There are 4 possibilities TODO, since the notation doesn't encode chirality?

On my end, I need to think about correspondence the other way: is a given notation even drawable? if so, how many knots correspond to a given notation? if so, how do I actually draw that knot?

(Footnote: These will always be knots; convince yourself that Dowker notation cannot encode links.)

TODO: The notation must consist of paired odd and even numbers to be drawable. 
TODO: From the Dowker notation, we can extract a 4-valent graph (a graph in which each vertex has 4 exiting edges). The knot is drawable if (and only if? TODO) the graph is planar, and then we can use existing planar graph algorithms to draw it.
(skip going into Charilaos-level detail here)
TODO: Or, here is an easier and more human algorithm:

Draw a line starting with 1-, 2-, ... until you reach ... and then ...
(skip going into detail here)

[diagrams]

So you could have communicated any of the following knots to me:
TODO

Not bad! And if we adopt a common protocol (TODO: only alternating knots / ignoring chirality), then we can narrow down the transmitted knot to just one or two!

Now that we've successfully serialized and deserialized a knot over the phone, what does that buy us?

Well, EVERY knot is expressible in Dowker notation. If we systematically write out 
ALL Dowker notations, then we know our knot must be there!

To enumerate all the knots up to 7 crossings, we write out all permutations of 
union over 1 through 7 of (2, 4, 6, ... of length (number of crossings)).

TODO TODO TODO :( code goes here ***

We've already covered which notations correspond to valid and drawable knots. 
Dowker equivalence is hard to handle and involves knot invariants, so I won't cover this part due to lack of time. Drawing algorithmically is also hard and is the subject of at least one undergraduate and PhD honors thesis, so I won't cover it here either. The actual knots are: TODO

Cool, so having a notation lets us ENUMERATE all the knots! e.g. for seven crossings. 

-----------------

1870
Kelvin: Atoms are knotted vortices in the ether!
Tait: I will enumerate the knots and thus unlock THE SECRETS OF THE UNIVERSE
(30 years pass)
Knot theorists: preeettty sure that atoms aren't knots
Knot theorists: lol gonna enumerate them anyway
You: but why?
Knot theorists: well...

First, tables are useful for shared knowledge and communication: nerds can just say "yes, I'm talking about the fifth knot with six crossings in the Canonical Strange Loop Knot Atlas 2015", and not have to solve this problem again! (This is Alexander-Briggs notation)

The tables are useful for checking hypotheses about knots and finding special cases. Also, we've had to develop new math to do this enumeration, which theorists think is worthwhile in itself!

"We hope that the census will serve as a rich source of examples and counterexamples and as a general testing ground for our collective intuition." (Hoste)

The basic strategy is to enumerate all knots up to a certain number of crossings, then group or eliminate the equivalent ones. 

More specifically, we use powerful theorems to reduce a general enumeration problem to an enumeration of special cases. We focus on prime alternating knots, ignoring mirror images (knots reflected over an axis). I'll cover why we do this later.

(Cite Hoste's 2 papers)

------------------

(segue into Conway)

To put Dowker notation in context: there are many knot notations. Some of you may have even come up with one before or during this talk! 

However, there are two *main* schools of knot notation, plus other interesting notations I won’t mention. One school wants to take an existing knot and break it down. From least recent to most recent, this school includes Gauss from the 1800s (yes, that Gauss TODO), Tait from 1890, Dowker from 1980, and Hoste from 1990. Another school wants to define “irreducible” bits of a knot and use them to build up a knot. This school includes Kirkman from 1880, Conway from 1950, and Caudron from 1980. 

TODO: timeline image 

We talked about Dowker notation and how it breaks down a knot in terms of direction and crossings. To draw a knot from Dowker notation -- if it is drawable (it might not be), we need to build up the knot, and it might not be unique. Now let’s talk about another approach -- how we can define primitives with which to build up a knot. 

------------------

As a hook, take this tantalizing quote from Conway’s seminal paper: "Little tells us that the enumeration of the 54 knots of [6] took him 6 years -- from 1893 to 1899 -- the notation we shall soon describe made this just one afternoon's work!" 

And this quote: “The enumeration process is eminently suitable for machine computation ... recent attempts at computer enumeration have proved unsatisfactory mainly because of the lack of a suitable notation.” 

How did Conway accomplish this feat? Namely, how did he invent a notation or representation of knots that enabled him to enumerate them so much more easily and efficiently? Let’s find out! First let’s talk about the primitives that he defined, which are twists; what operations we can do on these primitives to make them become tangles, and what we can do to tangles to make them become knots. Then we'll go over the "tell a knot to a nerd over the phone" Conway-style, then knot-to-notation correspondences, use in enumeration, and tradeoffs.

A tangle is built by starting with two ropes with ends in the four corners of a circle. The corners are (clockwise) SW, NW, NE, SE. 
The beginning tangles are either the 0 or infinity tangle.
[cite Piponi, tangle dance]

Then, we twist the tangle either once upward or once downward.

We add two tangles by simply smashing them together. That is, we join the NE corner of the first tangle with the NW corner of the second tangle, and likewise with the SW corner of the first tangle with the SW corner of the second tangle.

We multiply two tangles by reflecting the first one over the northwest-southeast diagonal, then adding it to the second one. The reflection can also be done by reversing all the crossings (undercrossing to overcrossing and vice versa) and rotating the tangle by 90 degrees clockwise. ***

We can twist a tangle multiple times by adding multiple 1 tangles. So, we’ll use, say, “3” as a synonym for “1 + 1 + 1”. "-3" is a synonym for "-1 + -1 + -1".
### 1 1 1 ... 1 is not in general the same as n

(TODO: cover the alternate method that eliminates reflection?)
(TODO: Rose's questions about how this seems arbitrary -- why 2 strings, 4 corners, these weird operations?)

Now we have this twisty thing – how do we make it into a knot? Well, as we said earlier, we have these (### irreducible) components. We pick a structure called a polyhedron and insert these tangles into the structure. (TODO won’t elaborate more on this) The default polyhedron we're using is the 1* polyhedron, which looks like this: (Basically we connect the NW and NE corners, and the SW and SE corners.)

(TODO: I don't think this is right. Consider 1 1 -2 -- nonalternating? Is it alternating for all positive integers? What about page 318 of Goldman/Kauffman? Can we prove this by saying that each individual strand is alternating?)
Notice that the resulting knots are always alternating (### and reduced / prime?).Here's a fuzzy inductive proof: The 1 knot is alternating because the overstrand is connected to the understrand, the knots of twists alternate because a twist always brings the overstrand to the top. The knots of muliplied tangles alternate because, given that the knots of the individual tangles ....

Now that we know the initial tangles and operations, we will name kinds of tangles, from simple to complex. Integral tangles are simple twists of some number of times: 1, -1, 3 = 1 + 1 + 1, -3 = -1 + -1 + -1.

Rational tangles are what you get when you start with two loops and twist the endpoints some number of times -- so naturally they can be untangled just by twisting. In other words, any tangle that looks like "x_1 x_2 ... x_n", or is formed by multiplying tangles in this way. (TODO: string/animation?)

Footnote on DNA (cite Chicago paper)

Algebraic tangles are more tangles formed by any combination of the operations above. In general, multiplying two tangles always results in a tangle that can be untwisted at the ends, but adding them might not. So, algebraic tangles more complex.
Consider 3 + 3, or (3, 3) -- it can't be untangled. (Adams)

(Rational) tangle as datatype:
0 | inf | twist up | twist down | mult tangle tangle 
(where mult is implemented as (reflect = convert all horiz twists to vertical and vice versa, and convert all up twists to down twists and vice versa + add on the coords) -- add is hidden. is this right?)

(Algebraic) tangle as datatype:
0 | inf | twist up | twist down | add tangle tangle | mult tangle tangle 
(TODO fix these)

----

Tell someone a knot (6_?) over the phone: Conway-style! TODO

You try to write the knot 6_? in terms of Conway notation -- it's not easy! I don't know if a proof exists that every knot has a Conway notation, but I haven't found any counterexamples. (From Conway's biography: Not all knots are good enough to have a notation in my system, and I don't know really what to do when they are not." (425) "Genius At Play") I don't even know if algorithms exist for transforming a knot diagram into a series of tangles. (TODO: the thesis paper?) 

And if 6_? has at least one notation, can it have multiple? The answer is yes! (TODO example, also LinKnot p52)

So, note that this part is a lot harder than it was for Dowker. 

On the other hard, when I draw the knot that you give me, it's easy! There's a well-defined algorithm, and a notation corresponds to exactly one knot. It's so easy that you could program a computer to draw knots in a day! Which I did. [pictures and code] (used Haskell, diagrams)

----

If we wanted to enumerate all knots up to 4 crossings, how would we do that? Well, notice that each twist introduces exactly one crossing, and every operation combining tangles adds the number of crossings in the tangle. Therefore, to find all knots (in Conway notation) that had 3 crossings, we'd find all ways to divide the number 4 into separate numbers that added up to it. With one complication: we can have twists indicated by a negative number, but they still add crossings, they don't take crossings away. So we take the absolute value.

all {x_i} :
n # crossings = \sum_i |x_i|

(example)
(code here)
λ> partitions 4
[[1,1,1,1],[1,1,2],[1,2,1],[1,3],[2,1,1],[2,2],[3,1],[4]]

also [-2] and on... but that increases it by a lot so we won't draw/enumerate it

(TODO update to have negative numbers)
(TODO my diagrams for knots up to 4 crossings)

That is, every partition of n corresponds to a rational ### knot with n crossings!
This can be easily done algorithmically! (TODO code) (TODO equation: there are 2^(n-1) = 2^3 partitions, so 8 diagrams)

But -- we can easily see that each of the knots in the following groups are the same:
1 3; 4
1 1 2; 2 2 (is 2 1 1 the same as 2 2? TODO check against Conway)
1 2 1; 3 1
1 1 1 1; 2 1 1

which already eliminates half of them (all the ones that start with 1).

And these are actually links:
3 1
1 3; 4

knots_to_4.svg

And in fact, [2 2] is the only real knot. It's the figure-8 knot. (diagram) What happened? 

Let's use the same process to enumerate all knots up to 7 crossings: ***
TODO
(Again, need to eliminate equivalents)

It seems like we have a lot more work to do!

Quote Hoste: 

"Indeed, it is the task of grouping the diagrams together by knot type rather than enumerating all possible diagrams that remains to this day the most difficult part of knot tabulation, for producing all possible diagrams is algorithmic and therefore, at least theoretically, trivial. 

(However, for a large crossing number, the sheer number of possible combinations is so huge that even with today's [1998] high-sped computers, the task of enumerating all possible diagrams remains difficult in practice.)" 
(* It took them 1-2 weeks for knots of 16 crossings!)

Enumeration is algorithmic; figuring out KNOT EQUIVALENCE is the real hard part! And in fact, again, this is an unsolved problem! Let's talk about knot equivalence WRT Conway's tangles, briefly touching on equivalence WRT Dowker.

Recall that two (projections of) knots are the same knot if and only if they can be transformed into each other via the Reidemeister moves, which are three moves. 

Now, if we focus on special kinds of knots, we can cut down these three moves into the more minimal *one* move, the flype. This makes checking for equivalence easier.

First, two definitions. Knots, surprisingly, behave a lot like numbers -- they can be prime or composite. Prime knots are just like prime numbers. A prime knot cannot be decomposed as the sum of two knots, whereas a composite one can. Menasco proved a powerful theorem about prime knots: a knot is prime iff its diagram "looks" prime; that is, we can separate two knots just by looking at any diagram of the knot..

An alternating knot is one that, as you follow a strand around, alternates going over and under strands. For a while knot theorists thought that only alternating knots existed!

Now the theorem: according to Tait's flyping theorem, two (projections of) prime/reduced (TODO) alternating knots are the same knot if and only if they can be transformed into each other via flypes. A flype is a 180 degree twist of a tangle out of the page, moving a single crossing from one of its sides to the other. (TODO finger flype) And it preserves the crossing number! (TODO look up right statement)

So, by applying all possible flypes to a reduced alternating diagram, we get exactly all the reduced alternating diagrams that it's equivalent to. Tait's theorem makes checking equivalence much more algorithmic, whereas Reidemeister moves are a good basic definition, but can increase the crossing number of the knot.
(TODO: runtime? proof of termination?)

(TODO: why put flypes here if I'm not going to talk about Conway flype stuff until later??)

Now, from knot equivalence to TANGLE EQUIVALENCE, since that's what knots are made of. Two tangles are equivalent if one can be transformed to the other by performing a series of Reidemeister moves on them to transform them into the same tangle, while keeping the ends fixed. One consequence is that, since the ends are fixed, if two knots contain tangles that are all equivalent, the knots are equivalent!
[cite the guy’s paper on converting knots to tangles]

So, this goes a long way toward helping us check knot equivalence, which is hard and unsolved. @@@ Conway proved a powerful theorem about tangle equivalence: two rational tangles are equivalent if and only if they are represented by the same rational number! This rational number is calculated by taking the tangle’s notation and converting it backward into a continued fraction. The proof of this is non-trivial.

Here are two tangles that are equivalent: 
2 2 = 2 + 1/2 = 5/2
-2 3 = 3 + 1/-2 = 5/2
The latter can be converted into the former by rotating the "loop" in the 2-tangle 180 degrees away from us into the plane of the page.

(TODO: more on properties of continued fractions. Can we find all tangles equivalent to a given one; that is, all {xi} : x1 + 1 / x2 + ... xn  = c? Maybe it was in the guy's thesis?)

This is a TRULY REMARKABLE result! Why should knots have anything to do with continued fractions and rational numbers?!?! (TODO intuition)

Can it be used to decide equivalence of any knot? Unfortunately not. We don't know if we can write every knot in terms of tangles, and more importantly, there exist knots that can't be written as RATIONAL tangles.

The knots up to 7 crossings (and most of the 8-crossing knots) are made of rational tangles, so they're "simpler." (Recall that rational tangles can be easily untangled by alternating twists on adjacent endpoints.) But many knots with higher crossing numbers are more complex; (not sure if there's a deep reason why, other than that more crossings correlates with more complexity) and can't be written in terms of rational tangles. So for these, we can't use the fraction equivalence technique.

But we CAN use another equivalence checking technique:
"The reader should now be able to interpret any knot name taken from out table, but he will not yet appreciate the reasons which make our ragbag of conventions so suspiciously efficient at naming small knots. Much of this efficiency arises from the fact that the notation absorbs Tait's 'flyping' notation (Fig. 7), which replaces 1 + t by t_h + 1, or 1bar + t by t_h + 1bar."

I won't go into this in detail, but in short, Conway's notation gives rise to a "standard form" for both algebraic and rational tangles. Converting a knot into its standard form squashes and cancels out its flypes, so any knots that can be converted into the same standard form are equivalent. Conway doesn't give a general algorithm to enumerate all flype-equivalent knots, but this seems do-able, and is left as an exercise for the reader!
(TODO relate to reduced/alternating diagrams?)

Finishing our enumeration of knots up to 7 crossings, we're left with the following knots: ***
TODO

which match the knots in the table of answers!

In summary:

"The main advantage of Conway symbols is the amount of important KL properties that are almost directly visible or can be derived from the codes."

"Conway's notational system reflected deep structural properties of knots" (Hoste).

By proving and relying on powerful theorems, Conway created a notation that is extremely good at dealing with equivalence for knots of lower crossing and for special cases of knots of higher crossing. This explains how he was able to do in "one afternoon" by hand what took Little "six years" to do by hand. It falls over on higher-crossing knots though.

However, it's not so good at dealing with knots of higher crossing number. Those require special "polyhedra" besides the 1* we dealt with (see pictures), which are ad-hoc (quote thesis). They also require non-rational tangles, which require special operations besides simple multiplication. Lastly, we lose the ability to definitively check tangle equivalence, and thus knot equivalence, for more complex knots.

Also in general, most small knots are alternating (which are the ones we've been focusing on in this talk), but knots in general are non-alternating.

So what DO we do for knots of higher crossing number? Do we stick it out with Conway, or do we go back to Dowker? 

------------------

"I find it intriguing that the most successful
modern tabulations don't use all the cleverness that Conway found, and
instead use [Dowker] notation, which is a much more naive notation." (Thurston)

This paper has one of the most delightful titles I've ever encountered: "The First 1,701,936 Knots." Co-written by that "Hoste" guy I've been quoting throughout this talk, it outlines the efforts of two teams to tabulate the prime knots with 16 or fewer crossings. The teams worked completely separately and secretly and compared their complete tabulations with the following result:

"We must report the gratifying experience of finding that our lists of 1,701,936 knots were in complete agreement!"

Both teams used DT, which they reported was simple and fast, but needs to be augmented with a lot of equivalence checking machinery. 

"The primary advantage of DT seems to be its brevity. With over 6 billion knots and links now in the tables, using as little computer memory as possible has obvious value.
On the other hand, DT sequences are not easily transformed directly under the types of operations that need to be applied to diagrams in the course of a tabulation. Instead, it is usually necessary to derive additional, attendant information about the diagram, such as the signs of the crossings..."

One team took advantage of the fact that all the knots were hyperbolic, which allowed easy equivalence checking, and the other team applied flypes and ad-hoc moves like double-passes and Perko moves, then computed invariants.

Here are more Dowker enumeration heuristics: 
- twist/untwist (nugatory crossings) (example: crossing labeled "1 2" can always be untwisted, so throw away all such knots)
- easy to detect connected knots (sub-adjacent permutations)
- throw out all knots whose notations are cyclic permutations (same knots)
  or moving in the other direction

At the same time, I find it incredible that it took 1-2 weeks for their program to tabulate knots of 16 crossings! (p39) Their paper was published in 1998, but that still seems astoundingly slow. Listeners and readers -- can YOU do better?

Here's what Hoste says about Conway's notation, applied to large crossing numbers:
"Conway's scheme draws on a large set of symbols arranged according to a rather large set of rules, both of which grow with crossing number, and for this reason does not lend itself well to computer programming."

That's too bad!
[TODO need something more quotable]

------------------------

In summary, here are important axes of knot notation, and notation in general: 
[TODO 3D picture]

- Breaking down objects vs. building them up
- Notation to object correspondence: one-to-many, many-to-one
- Human readability/writability
- Machine readability/writability
- Simplicity (number of symbols and functions)
- Ease of performing operations on the represented object
- Ease of reading properties off notation
- Insights it encodes
- New manipulations and ways of thinking it encourages

Programming language researchers and enthusiasts love thinking about powerful notations. One could make a case that:

A blob of thought in your head corresponds to a knot,
a programming language corresponds to a notation or representation, and
a program corresponds to a representation for that knot.

Taking this analogy further is up to you and your own experience and work.

And here are the knot-independent takeaways:

- Reduce the problem to cases and special cases, often relying on powerful theorems (focus on prime alternating knots, ignoring mirror images, of small crossing number)
- Encode insights in your notation, again relying on powerful theorems (Tait flyping conjecture, rational tangle equivalence)
- A notation has trade-offs along several axes -- sacrifices in one area can lead to big gains in another (e.g. sacrificing those of large crossing number to focus on those of small crossing number; sacrificing ease of encoding for ease of enumeration)
- Lastly, don't get too attached to one notation or representation; there can be something really interesting, unexpected, or interdisciplinary waiting for you to discover or invent it!

TODO: need something more quotable

Thanks!

-----------------------

Acknowledgments: 

David Prager Branner (discussions and deadlines)
Rose Ames (questions and deadlines)
Dylan Thurston (knot theory)
Practice talk listeners

---

Sources:

Conway's paper
The Knot Book
Hoste (1)
Hoste (2)
LinKnot
Rational Tangles
Genius At Play
The Mystery of Knots
Various undergraduate honors theses
KnotPlot thesis

---

Footnotes: 


