THESIS goes here: 

TODO = section; ### = gap; @@@ = badly phrased; +++ = might need to be moved, *** = diagram

emacs: C-x h (select whole buffer), M-= (word count)
TODO: move to Word when I have pictures

Abstract:

Knots are fascinating, complicated, and inherently visual objects! Here, for example: http://katlas.org/wiki/The_Rolfsen_Knot_Table_Mosaic How do we serialize them into text? 

Serializing knots into text allows us to think about them systematically; for example, we can now use a notation to write out all knots algorithmically. It turns out that enumerating knots is a concrete way to use a notation and compare its quality along various axes. For example, how easy is it for a human to write the notation and draw the corresponding knot? What about for a computer? How easy is it to check if two enumerated knots are equivalent? What new insights and operations can powerful representations enable?

In this talk, we will enumerate all the knots of <= 7 crossings by using notations of two approaches, the Dowker school and the Conway school. (To get the most out of this talk, try this yourself without looking at existing approaches!) Along the way, we will examine the quality of the notations along the axes listed earlier. 

Conway makes the following boast in his seminal paper: "Little [who used a Dowker-style notation] tells us that the enumeration of the 54 knots of [6] took him 6 years -- from 1893 to 1899 -- the notation we shall soon describe made this just one afternoon's work!" We'll see how he accomplished this feat, and what tradeoffs he had to make.

------------------

[TODO thesis] 

Why talk about these strange loops at at StrangeLoop?
Takeaways here: 

Different notations, powerful notations, knots are cool

------------------

What's a knot in the fist place?

Our idea of a knot is sort of a shoelace-tying knot with loose ends:

Mathematicians' idea of a knot is basically to tie these ends together, into a line embedded in 3-dimensional space: 

And this knot is made of very stretchy string, allowing you to do this (called an isotopy:
[to trefoil]

[Footnote: you might be wondering how we prove that the trefoil is a knot with three crossings, and not actually the simplest knot, an unknot. Take my word for it for now. TODO]

Knots can be very complex. [Knot Atlas]
Knots seem inherently visual. [unlike graphs]
They give rise to the following difficulty:

Mathematician John Conway:
  One thing I never figured out was how to tell a knot
  to a nerd over the phone! Keep in mind that the person
  you're talking to is just as much of a nerd as you are! [1]
[1] Knot tables exist

Let's try some ways for you to tell me this knot over the phone:
[six-crossing knot]

First: "It has six crossings!"
(This is an actual notation, the Alexander-Briggs)

But that's not enough information! It could be this one. Or this one.
[6_1, 6_2, 6_3...]

------------------

Second: Augment "six crossings" with more information!

More information = a common protocol about how to draw/construct the knot.
(More topological terms?)
The next most obvious thing is to add a *direction* on top of the crossing number
/ each crossing. We do this by traveling around the knot.

Every crossing gets an odd and an even number -- why? (exercise)

Give me the Dowker notation for 6_1. 
This knot has multiple notations, depending on which crossing I start at.

Now, you tell me this notation over the phone. 
I try to draw 6_1. There are 4 possibilities. 
This notation corresponds to multiple knots.

notation for a knot:

knot for a notation:

cannot encode links

many notations correspond to a knot (depending on where you start from)
several knots correspond to a notation (mirror-images) TODO

Every knot is expressible in Dowker notation. If we systematically write out 
ALL Dowker notations, then we know our knot must be there! [use laziness?]

Cool, so having a notation lets us ENUMERATE all the knots! e.g. for seven crossings. 

-----------------

[TODO enumeration/tabulation + history of + equivalence]
Kelvin, Tait, atoms.

Make numbered knot tables: so nerds can just say "yes, I'm talking about the fifth entry in the Canonical Strange Loop Knot Atlas 2015", and not have to solve this problem again!

Tables useful for DNA, checking hypotheses about knots, special cases, communication among theorists.

Focus on prime alternating knots of small crossing numbers, ignoring mirror images.

------------------

There are two main schools of knot notation, plus some other interesting notations I won’t mention. One school wants to take an existing knot and break it down. From least recent to most recent, this school includes Gauss, Dowker, and Hoste. Another school wants to define “irreducible” bits of a knot and use them to build up a knot. This school includes Kirkman, Conway, and Caudron.  

We talked about Dowker notation and how it breaks down a knot by tracing around it. To draw a knot from Dowker notation, we need to build up the knot, and it might not be unique. @@@ Now let’s talk about how we can define primitives with which to build up a knot. 

------------------

So, let’s talk about Conway notation! 

notation for a knot:

knot for a notation: 

The other way: to write a Conway notation from a knot, we need to break down the knot into the primitives, and it may not be unique; but on the other hand, drawing the knot is unique and easy! 

As a hook, take this tantalizing quote from Conway’s seminal paper: "Little tells us that the enumeration of the 54 knots of [6] took him 6 years -- from 1893 to 1899 -- the notation we shall soon describe made this just one afternoon's work!" 

And this quote: “The enumeration process is eminently suitable for machine computation ... recent attempts at computer enumeration have proved unsatisfactory mainly because of the lack of a suitable notation.” 

How did Conway accomplish this? Namely, how did he invent a notation or representation of knots that enabled him to enumerate them so much more easily and efficiently? Let’s find out! First let’s talk about the primitives that he defined, which are twists; what operations we can do on these primitives to make them become tangles, and what we can do to tangles to make them become knots.

A tangle 
[cite Piponi, tangle dance]

A tangle is built by starting with two ropes with ends in the four corners of a circle: ***
They’re either the 0 or infinity tangle.

Then, we twist the tangle either once upward or once downward.

Tangle as datatype:
0 | inf | twist up | twist down | add tangle tangle | mult tangle tangle | (reflect?)
(3 is shorthand for adding 1 1 1)

We add two tangles by simply smashing them together. ***

We multiply two tangles by reflecting the first one over the northwest-southeast diagonal, then adding it to the second one. The reflection can also be done by reversing all the crossings (undercrossing to overcrossing and vice versa) and rotating the tangle by 90 degrees clockwise. ***

We can twist a tangle multiple times by adding multiple 1 tangles. So, we’ll use, say, “3” as a synonym for “1 + 1 + 1”. 
### 1 1 1 ... 1 is not in general the same as n, right

Footnote on DNA (cite Chicago paper)

Now we have this twisty thing – how do we make it into a knot? Well, as we said earlier, we have these (### irreducible) components. We pick a structure called a polyhedron and insert these tangles into the structure. (TODO won’t elaborate more on this)

Notice that the resulting knots are always alternating (### and reduced). The tangle is (reduced?). 

If we wanted to enumerate all knots up to 4 crossings, how would we do that? Well, notice that each twist introduces exactly one crossing, and every operation combining tangles adds the number of crossings in the tangle. Therefore, to find all knots (in Conway notation) that had 3 crossings, we'd find all ways to divide the number 4 into separate numbers that added up to it. With one complication: we can have twists indicated by a negative number, but they still add crossings, they don't take crossings away. So we take the absolute value.

all {x_i} :
n # crossings = \sum_i |x_i|

(example)
(code here)
λ> partitions 4
[[1,1,1,1],[1,1,2],[1,2,1],[1,3],[2,1,1],[2,2],[3,1],[4]]

also [-2] and on... but that increases it by a lot so we won't draw/enumerate it

(TODO update to have negative numbers)
(TODO my diagrams for knots up to 4 crossings)

That is, every partition of n corresponds to a rational ### knot with n crossings!
This can be easily done algorithmically! (TODO code) (TODO equation: there are 2^(n-1) = 2^3 partitions, so 8 diagrams)

But -- we can easily see that each of the knots in the following groups are the same:
1 3; 4
1 1 2; 2 2 (is 2 1 1 the same as 2 2? TODO check against Conway)
1 2 1; 3 1
1 1 1 1; 2 1 1

which already eliminates half of them (all the ones that start with 1).

And these are actually links:
3 1
1 3; 4

knots_to_4.svg

And in fact, [2 2] is the only real knot. It's the figure-8 knot. (diagram) What happened? It seems like we have a lot more work to do!

Quote Hoste: Enumeration is algorithmic; figuring out KNOT EQUIVALENCE is the real hard part! And in fact, this is an unsolved problem! Let's talk about knot equivalence.

Two (projections of) knots are the same knot if and only if they can be transformed into each other via the Reidemeister moves.

Tait's flyping theorem: Two (projections of) prime alternating knots are the same knot if and only if they can be transformed into each other via flypes. This is more minimal, since it's only one move vs. three. A flype is a 180 degree twist of a tangle out of the page, moving a single crossing from one of its sides to the other. (TODO finger flype) And it preserves the crossing number! (TODO look up right statement)

Prime knots are just like prime numbers. A prime knot cannot be decomposed as the sum of two knots, whereas a composite one can. TODO: Menasco proved a powerful theorem about prime knots: a knot is prime iff its diagram "looks" prime!

An alternating knot is one that, as you follow a strand around, alternates going over and under strands. For a while knot theorists thought that only alternating knots existed!

So, (TODO Tait's theorem is useful because it helps us test equivalence of two knots by enumeration! Reidemeister is a good basic definition but not so useful, esp. since we don't necessarily know how to transform notation!)

Now, from knot equivalence to TANGLE EQUIVALENCE, since that's what knots are made of. Two tangles are equivalent if one can be transformed to the other by performing a series of Reidemeister moves on them to transform them into the same tangle, while keeping the ends fixed. One consequence is that, since the ends are fixed, if two knots contain tangles that are all equivalent, the knots are equivalent!
[cite the guy’s paper on converting knots to tangles]

So, this goes a long way toward helping us check knot equivalence, which is hard and unsolved. @@@ Conway proved a powerful theorem about tangle equivalence: two rational tangles are equivalent if and only if they are represented by the same rational number! This rational number is calculated by taking the tangle’s notation and converting it backward into a continued fraction. The proof of this is non-trivial.

Here are two tangles that are equivalent: 
2 2 = 2 + 1/2 = 5/2
-2 3 = 3 + 1/-2 = 5/2
The latter can be converted into the former by rotating the "loop" in the 2-tangle 180 degrees away from us into the plane of the page.

(TODO: more on properties of continued fractions. Can we find all tangles equivalent to a given one; that is, all {xi} : x1 + 1 / x2 + ... xn  = c? Maybe it was in the guy's thesis?)

redo tabulation: knots to <= 7 crossings with negative numbers

The knots up to 7 crossings (and most of the 8-crossing knots) are rational, meaning that they're made of rational tangles, so they're "simpler." But many knots with higher crossing numbers are more complex (not sure if there's a deep reason why, other than that more crossings correlates with more complexity) and can't be written in terms of rational tangles.

Rational tangles are what you get when you start with two loops and twist the endpoints some number of times -- so naturally they can be untangled just by twisting. non-rational tangles can't be un-tangled in this simple manner, so they're more complex.

checking equivalence via flypes

### what’s going on with the flypes? (3, 2, 1, 1) = 7? why write it out? do things under flyping have the same rational fraction? why are we using comma notation? what’s standard form?

The main advantage of Conway symbols is the amount of important KL properties that are almost directly visible or can be derived from the codes
It is very surprising that the Conway notation, the only geometrical-topological notation that gives complete, interpretable and understandable information on KLs is still not widely accepted (linknot)
Conway's notational system reflected deep structure properties of knots (hoste)

dealing with higher-crossing knots, duplicates, links, polyhedra, other operations

most small knots are alternating, but most knots overall are not alternating.

(TODO refer to knot book, linknot, etc.)

----------------------- Comparison

[TODO computers vs. humans. knots of large crossing number vs. small crossing number]

"I find it intriguing that the most successful
modern tabulations don't use all the cleverness that Conway found, and
instead use DT notation, which is a much more naive notation." (Thurston)

Hoste's paper "The First 1,701,936 Knots":

- Conway is great for small knots and human tabulation because of easy equivalence checking. I assume this accounts for a large part of the boast of "It took Little 6 years to do what I, with my notation, did in one afternoon."
- But large knots may not be rational and may require other tangle operations and polyhedra, which is complicated, ad-hoc, and doesn't have the same ease of checking equivalence.
- DT is simple and fast, but needs to be augmented with a lot of equivalence checking machinery. One team took advantage of the fact that all the knots were hyperbolic, which allowed easy equivalence checking, and the other team applied ad-hoc moves like double-passes and Perko moves, then computed invariants.
- At the same time, I find it incredible that it took 1-2 weeks for their program to tabulate knots of 16 crossings! (p39) Their paper was published in 1998, but that still seems astoundingly slow.

quote Hoste on Conway (large number of primitives) vs what they used, Dowker (both him and Thistlewaite, but needed ad-hoc checks)

most small knots are alternating, but knots in general are non-alternating

[TODO comparison]

Breaking down objects vs. building them up
Notation to object correspondence: one-to-many, many-to-one
Human readability/writability
Machine readability/writability
Simplicity (number of symbols and functions)
Ease of performing operations on the represented object
Ease of reading properties off notation
Insights it encodes
New manipulations and ways of thinking it encourages

[TODO lessons]

Blob of thought in head <-> knot
Programming language <-> notation or representation
Program <-> representation for that knot

- Don't get too attached to one notation; 
- Reduce the problem to cases and special cases, often relying on powerful theorems (focus on prime alternating knots, ignoring mirror images, of small crossing number)
- Encode insights in your notation, again relying on powerful theorems (Tait flyping conjecture, rational tangle equivalence)
- A notation has trade-offs along several axes -- sacrifices in one area can lead to big gains in another (e.g. sacrificing those of large crossing number to focus on those of small crossing number; sacrificing ease of encoding for ease of enumeration)

---

Acknowledgments: 
David Prager Branner (prep)
Rose Ames (questions)
Dylan Thurston (knot theory)
